{{!-- The index of the version comparison page --}}
{{#> layout title="What's new in the PIM since your version?"}}
{{> navbar-only-logo }}
    <div id="versions-comparison" class="container-fluid versions-comparison" data-init-versions="{{defaultVersions}}" data-init-domains="{{defaultDomainsAndFeatures}}">
        <div class="row">
            <div class="col-xs-12">
                <p class="breadcrumb text-muted"><a href="/">Home</a> / <a href="/pim/serenity">PIM help center</a> / What's new in the PIM since your version?</p>
                <h1>What's new in the PIM since your version?</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-md-7">
                <h3>PIM versions</h3>
                {{#each versions as |version key|}}
                    <label class="version-checkbox">
                        <input id=".{{key}}" onclick="filterVersions('.{{key}}', this)" type="checkbox" value=".{{key}}" />
                        <span class="label label-default{{#if isSupported}} label-supported-version{{/if}}">{{name}}</span>
                    </label>
                {{/each}}
                <p class="small label-supported-version"><em>This green dot means that this is a version for which we offer support if you are an Enterprise or a Cloud user.</em></p>
            </div>
            <div class="col-xs-12 col-md-5">
                <h3>PIM editions</h3>
                <label class="edition-radio">
                    <input id=".CE" onclick="filterEdition('.CE')" name="editionFilter" type="radio" />
                    <span class="label label-default">Community</span>
                </label>
                <label class="edition-radio">
                    <input id=".EE" onclick="filterEdition('.EE')" name="editionFilter" type="radio" />
                    <span class="label label-default">Enterprise</span>
                </label>
                <p class="small"><em>Note that this filter is ignored for Serenity new features.</em></p>
            </div>
            <div class="col-xs-12 col-md-7">
                <h3>PXM domains</h3>
                {{#each domains as |domain key|}}
                    <label class="domain-checkbox">
                        <input id=".{{key}}" onclick="filterDomains('.{{key}}', this)" type="checkbox" value=".{{key}}" /> 
                        <span class="label label-{{domain.color}}">{{domain.label}}</span>
                    </label>
                {{/each}}
            </div>
            <div class="col-xs-12 col-md-5">
                <h3>PIM features</h3>
                {{#each features as |feature key|}}
                    <label class="domain-checkbox">
                        <input id=".{{key}}" onclick="filterDomains('.{{key}}', this)" type="checkbox" value=".{{key}}" /> 
                        <span class="label label-{{feature.color}}">{{feature.label}}</span>
                    </label>
                {{/each}}
            </div>
        </div>
        <div class="row versions-comparison-results">
            <div class="col-xs-12">
                <p id="news-count"></p>
            </div>
            <div class="col-xs-12">
                <div class="grid">
                    {{#each updates as |update id|}}
                        <div class="versions-comparison-updates {{version}} {{#each domainCodes as |domain|}}{{domain}} {{/each}} {{#each editions as |edition|}}{{edition}} {{/each}}" data-version="{{version}}">
                            <p class="title">{{title}}</p>
                            <p><em>Available {{#if isSerenityOnly}} in <b>Serenity</b>{{else}} since <b>{{since-version}}</b> in {{#each editions as |edition|}} {{#if @last}}{{#unless @first}} & {{/unless}}{{/if}}{{edition}}{{/each}}{{/if}}</em>
                            <p>{{#each coloredDomains as |domain color|}}<span class="label label-{{color}}">{{domain}}</span> {{/each}}</p>
                            {{#if link}}<p class="text-right"><a class="link" href="{{link}}" target="_blank">Read more... ></a></p>{{/if}}
                        </div>
                    {{/each}}
                </div>
            </div>
        </div>
    </div>
<script type="text/javascript">
    // Init the news grid. They will be sorted by versions in descending order
    var $grid = $('.grid').isotope({itemSelector: '.versions-comparison-updates',layoutMode: 'fitRows',getSortData: {version: '[data-version]'},sortBy: 'version',sortAscending: false});
    // Get the available list of versions and domains/features
    var versions = _.map(document.getElementById('versions-comparison').dataset.initVersions.split(','), function(version){return '.' + version});
    var domains = _.map(document.getElementById('versions-comparison').dataset.initDomains.split(','), function(domain){return '.' + domain});
    // By default, we select the following filters: all versions, the Enterprise Edition and all domains/features
    var checkedVersions = [...versions];
    var checkedEdition = '.EE';
    var checkedDomains = [...domains];
    // Only in the case there is no hash in the URL, we set up the hash to take into account the default filters set above.
    if(!getHashVersions() && !getHashEdition() && !getHashDomains()){
       setHash(); 
    }
    // Watch the changes in the URL hash to update the news grid and the selected filters accordingly
    $(window).on('hashchange',onHashchange);
    // Trigger a hash change to compute the right filters based on the current hashed url
    onHashchange();

    function getHashVersions() {
        var matches = location.hash.match(/versions=([^&]+)&edition=.*&domains=.*/i);
        var hashVersions = matches && matches[1];
        return hashVersions && decodeURIComponent(hashVersions);
    }
    function getHashEdition() {
        var matches = location.hash.match(/versions=.*&edition=([^&]+)&domains=.*/i);
        var hashEdition = matches && matches[1];
        return hashEdition && decodeURIComponent(hashEdition);
    }
    function getHashDomains() {
        var matches = location.hash.match(/versions=.*&edition=.*&domains=([^&]+)/i);
        var hashDomains = matches && matches[1];
        return hashDomains && decodeURIComponent(hashDomains);
    }
    function setHash(){
        location.hash = 'versions=' + encodeURIComponent(checkedVersions) + '&edition=' + encodeURIComponent(checkedEdition) + '&domains=' + encodeURIComponent(checkedDomains);
    }

    function onHashchange() {
        // Get the versions, edition and domains/features set in the URL hash and set the checked versions accordingly
        var hashVersions = getHashVersions();
        checkedVersions = hashVersions ? hashVersions.split(',') : ['.none'];
        checkedEdition = getHashEdition();
        var hashDomains = getHashDomains();
        checkedDomains = hashDomains ? hashDomains.split(',') : ['.none'];
        
        // Filter the news in the grid depending on the checked filters
        $grid.isotope({ filter: computeFilters() });
        // Set the number of news displayed in the grid
        countNews();

        // Check the right version checkboxes, edition radio button and domain checkboxes according to the URL hash
        document.getElementById(checkedEdition).checked = true;
        _.each(versions,function(version){
            var checked = _.find(checkedVersions, function(checkedVersion) { return checkedVersion === version; }) ? true : false;
            document.getElementById(version).checked = checked;
        });
        _.each(domains,function(domain){
            var checked = _.find(checkedDomains, function(checkedDomain) { return checkedDomain === domain; }) ? true : false;
            document.getElementById(domain).checked = checked;
        });
    }

    function countNews(){
        var newsCount = $grid.data('isotope').filteredItems.length;
        document.getElementById('news-count').innerHTML = newsCount ? 'There were <b>' + newsCount + '</b> new key features delivered in the PIM for the versions, edition and domains/features you selected. ðŸ’ª' :  'Uh oh! There were <b>' + newsCount + '</b> new key feature delivered in the PIM for the versions, edition and domain/features you selected.<br/><b>Don\'t hesitate to change the above filters to see more new features!</b> ðŸ˜‰';
    }

    function filterVersions(version, elm) {
        // Each time a version checkbox is clicked, we update the checked versions accordingly
         _.pull(checkedVersions, '.none');
        elm.checked ? checkedVersions.push(version) : _.pull(checkedVersions, version);
        if(checkedVersions.length === 0){
            checkedVersions.push('.none');
        }
        // And we update both URL and the news grid accordingly
        updateHashAndRedrawGrid();
    }

    function filterEdition(edition) {
        checkedEdition = edition;
        // And we update both URL and the news grid accordingly
        updateHashAndRedrawGrid();
    }

    function filterDomains(domain, elm) {
         _.pull(checkedDomains, '.none');
        elm.checked ? checkedDomains.push(domain) : _.pull(checkedDomains, domain);
        if(checkedDomains.length === 0){
            checkedDomains.push('.none');
        }
        // And we update both URL and the news grid accordingly
        updateHashAndRedrawGrid();
    }

    function updateHashAndRedrawGrid(){
        // Update the URL hash to reflect the checked filters
        setHash();
        // Filter the news in the grid depending on the checked filters
        $grid.isotope({ filter: computeFilters() });
        // Set the number of news displayed in the grid
        countNews();
    }

    function computeFilters() {
        // Construct the string needed for the grid to be filtered properly according to the checked versions, edition and domains/features
        var combinationOfVersionsDomains = [];
        _.each(checkedDomains, function(domain){
            _.each(checkedVersions, function(version){
                combinationOfVersionsDomains.push(domain + version); 
            });
        });
        return combinationOfVersionsDomains.join(checkedEdition + ', ') + checkedEdition;
    }
</script>
{{/layout}}
